<template>
  <div class="login-page">
    <div class="login-title">
      <text class="heading">欢迎来到记账小管家</text>
      <text class="subhead">使用手机号快捷登录，享受更多专属权益</text>
    </div>
    <div class="phone-num">
      <text>手机号</text>
      <input
        placeholder="请输入手机号"
        model:value="{{phone}}"
        type="number"
        class="ipt"
      />
    </div>

    <div class="verification-code">
      <text class="heading">验证码</text>
      <input
        placeholder="请输入验证码"
        model:value="{{authCode}}"
        class="ipt"
      />
      <text
        class="get-verification"
        style="{{beingSent? 'color: #999999':''}}"
        @click="sendAuthCode"
        >{{
          countDownTime.seconds ? countDownTime.seconds + 's' : '获取验证码'
        }}</text
      >
    </div>

    <div class="canvas" style="{{showStrVerificationCode?'':'height: 0'}}">
      <input
        placeholder="请文字输入验证码"
        class="CIpt"
        model:value="{{subimtStr}}"
      />
      <canvas
        id="cvs"
        style="width: 150px; height: 100px"
        @click="clickCvas"
      ></canvas>
    </div>

    <div class="login-btn" @click="subimt">
      <text class="txt">登录</text>
    </div>

    <div class="consent">
      <input
        type="checkbox"
        checked="{{consentChecked}}"
        model:value="{{consentChecked}}"
        @change="checkedRadio"
      />
      <div class="" style="left: -36px">
        <text class="default">勾选同意</text>
        <a href="https://www.ihaituo.cn/xy/jz/yhxy.html" class="agreement"
          >《用户协议》</a
        >
        <text class="default">和</text>
        <a href="https://www.ihaituo.cn/xy/jz/yszc.html" class="agreement"
          >《隐私政策》</a
        >
      </div>
    </div>
  </div>
</template>

<style lang="less">
@import './index.less';
</style>
<!-- <import name="my-radio" src="apex-ui/components/radio/index"></import> -->

<!-- <import name="my-vcode" src="apex-ui/components/vcode/index"></import> -->
<script>
import $device from '@system.device'
export default {
  private: {
    consentChecked: false,
    authCode: '',
    phone: "",
    deviceNum: '123123',
    countDownData: {
      isFormat: false,
      name: "countDownTime",
      totalSeconds: 60
    },
    countDownTime: {
      minute: 0,
      seconds: 0
    },
    timer: null,
    beingSent: false,
    strVerificationCode: "",
    subimtStr: "",
    showStrVerificationCode: false
  },
  onInit: function () {
    const that = this
    $device.getUserId({
      success: function (data) {
        that.deviceNum = data.userId;
      },
      fail: function (data, code) {
        console.log('handling fail, code = ' + code);
      }
    })
  },
  onShow: function () {
    $umeng_stat.resume(this) //在onShow方法的第一行加入此代码
    //App业务代码
  },
  onHide: function () {
    $umeng_stat.pause(this);//在onHide方法的第一行加入此代码
    //App业务代码
  },
  checkedRadio: function (e) {
    this.consentChecked = e.checked
  },
  sendAuthCode: $utils.throttle(function (params) {
    if (!this.phone) {
      $prompt.showToast({
        message: '请输入手机号',
        gravity: 'center'
      })
      return
    }
    const testPhone = this.isValidPhoneNumber(this.phone)
    if (!testPhone) {
      $prompt.showToast({
        message: '手机号码格式不正确',
        gravity: 'center'
      })
      return
    }
    if (this.beingSent) {
      return
    }
    if (this.strVerificationCode && (this.strVerificationCode !== this.subimtStr)) {
      $prompt.showToast({
        message: '文字验证码不正确',
        gravity: 'center'
      })
      return
    }
    $apis.user.postSendCode({
      phone: this.phone,
    }).then((res) => {
      console.log(res);
      $prompt.showToast({
        message: '已发送',
        gravity: 'center'
      })
      console.log('查看短信验证码', res);
      this.beingSent = true;
      this.startCountDown()
    }).catch((err) => {
      $prompt.showToast({
        message: JSON.stringify(err).message,
        gravity: 'center'
      })
    })
  }, 5000),
  subimt: function () {

    if (!this.phone || !this.authCode) {
      $prompt.showToast({
        message: `${this.phone ? '请输入验证码' : '请输入手机号'}`,
        gravity: 'center'
      })
      return
    }
    if (!this.consentChecked) {
      $prompt.showToast({
        message: `请同意协议`,
        gravity: 'center'
      })
      return
    }
    if (this.strVerificationCode && (this.strVerificationCode !== this.subimtStr)) {
      console.log(this.strVerificationCode);
      console.log(this.subimtStr);
      $prompt.showToast({
        message: '文字验证码不正确',
        gravity: 'center'
      })
      return
    }
    const param = {
      loginType: 'PHONE',
      code: this.authCode,
      appId: "AC_0001",
      loginAccount: this.phone,
      deviceNum: this.deviceNum,
      phone: this.phone
    }
    $apis.example.toLogin({
      ...param
    }).then(async (res) => {
      console.log(res, '查看数据');
      $prompt.showToast({
        message: '登录成功',
        gravity: 'center',
        duration: 2000
      })
      $storage.delete({
        key: "AUTH_TOKEN_DATA",
        success: function (data) {
          setTimeout(() => {
            $router.back()
          }, 800);
        },
      })
    }).catch((err) => {
      console.log(err.code, '这是点击错误');
      $prompt.showToast({
        message: JSON.parse(err).message,
        gravity: 'center'
      })
    })

  },
  startCountDown() {
    $utils.startCountDown(this.countDownData, this).then(() => {
      this.beingSent = false;
      this.countDownTime = {
        minute: 0,
        seconds: 0
      }
      this.showStrVerificationCode = true;
      this.clickCvas()
    });
  },
  isValidPhoneNumber: function (phoneNumber) {
    const phonePattern = /^(?:\+86)?1[3-9]\d{9}$/;
    return phonePattern.test(phoneNumber);
  },
  changeHandler: function (params) {
    console.log(params, 'params');
  },
  // 生成[min,max)之间的随机数
  randomNum: function (min, max) {
    return Math.floor(Math.random() * (max - min) + min)
  },
  // 生成随机颜色
  randomColor: function (min, max) {
    let r = this.randomNum(min, max)
    let g = this.randomNum(min, max)
    let b = this.randomNum(min, max)
    return `rgb(${r},${g},${b}`;
  },
  clickCvas: function () {
    let canvas = this.$element('cvs')
    console.log(canvas, '查看这个canvas');
    let ctx = canvas.getContext("2d");
    // 背景填充色 随机
    ctx.fillStyle = this.randomColor(70, 230)
    ctx.fillRect(0, 0, 150, 150)
    // 随机生成字符串
    // 字符池
    const pool = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'
    // 存储生成的随机验证码
    let imgCode = ''
    // 生成 4 位验证码
    for (let i = 0; i < 4; i++) {
      const text = pool[this.randomNum(0, pool.length)]
      imgCode += text
      // 随机字体大小
      const fontSize = this.randomNum(22, 80)
      ctx.font = `${fontSize}px Simhei`
      // 计算随机旋转角度
      const deg = this.randomNum(-30, 30)
      // 设置文本基线为顶部
      ctx.textBaseline = 'top'
      // 随机字体颜色
      ctx.fillStyle = this.randomColor(80, 150)
      // 将当前状态封存入栈
      ctx.save()
      // 随机偏移距离
      ctx.translate(30 * i + 15, 15)
      // 随机旋转角度
      ctx.rotate((deg * Math.PI) / 180)
      // 位置相对于当前状态，左偏移10，上偏移15
      ctx.fillText(text, -10, -15)
      // 恢复之前保存的绘图状态
      ctx.restore()
    }
    this.strVerificationCode = imgCode
  }
}
</script>