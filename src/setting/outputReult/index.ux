<template>
  <div class="outputReult-page">
    <!-- loding-box -->
    <div class="loding-box" if="{{showLoding}}">
      <loading-tisp></loading-tisp>
      <text class="txt"> 识别中</text>
    </div>

    <!-- 输入问题框 -->
    <div
      class="select-input"
      for="defaultSelectList"
      if="{{!result && btnColor[reqType].iconPath  && showProblem}}"
    >
      <div class="title">
        <image src="{{$item.iconPath}}" class="icon"></image>
        <text class="txt">{{ $item.title }}</text>
      </div>
      <!-- 选中框 -->
      <div
        class="select"
        if="{{$item.inputType === 'select' && $item.selectArr }}"
      >
        <div
          for="{{(index,value) in $item.selectArr}}"
          class="select-item {{value.title===(selectVal.title)?'a-select-item':''}} {{index === 0?'no-margin':index ===3 ?'no-margin':''}}"
          @click="changeSelctVal(value, index)"
        >
          <text
            class="txt"
            style="{{value.title===(selectVal.title)?' color: #e14350;':''}}"
            >{{ value.title }}</text
          >
        </div>
      </div>
      <!-- 输入框  -->
      <div class="ipt-box" if="{{$item.inputType === 'input' }}">
        <input
          placeholder="{{$item.placeholder}}"
          class="ipt"
          type="text"
          model:value="{{iptvalue}}"
        />
      </div>
      <div class="issue" if="{{$item.inputType === 'textarea' }}">
        <div class="content">
          <textarea
            @change="changeTxt"
            class="txt"
            placeholder="{{$item.placeholder}}"
            maxlength="300"
          ></textarea>
        </div>
        <div class="bottom">
          <text
            >已输入{{
              iptvalue.length >= 300 ? 300 : iptvalue.length
            }}/300</text
          >
        </div>
      </div>
    </div>

    <div class="result" if="{{result}}">
      <div class="title" if="{{btnColor[reqType].iconPath}}">
        <image src="{{btnColor[reqType].iconPath}}" class="icon"></image>
        <text class="txt">查看结果</text>
      </div>
      <text>{{ result }}</text>
    </div>
    <!-- 确定框 -->
    <div
      class="submit-btn"
      if="{{!showLoding && showBtn}}"
      onclick="submit"
      style="background-color:{{btnColor[reqType].color || '#000000'}}"
    >
      <text>{{ result ? '复制文本' : btnColor[reqType].text }}</text>
    </div>
  </div>
</template>

<import name="loading-tisp" src="../../components/loading-tisp"></import>
<script>
const file = require('@system.file')
const media = require('@system.media')
const base64Arraybuffer = require('base64-arraybuffer')
const clipboard = require('@system.clipboard')

export default {
  private: {
    showLoding: false,
    result: '',
    currUri: "",
    reqType: '',
    defaultSelectList: [],
    Fortunetelling: [
      {
        iconPath: "../../Common/images/select-icon.png",
        title: '请选择测试类型',
        selectArr: [
          {
            title: "手机号",
            id: 1,
            paramName: "mobile",
            placeholder: "请输入11位手机号"
          },
          {
            title: "车牌号",
            id: 2,
            paramName: "carNo",
            placeholder: "请输入车牌号"
          },
          {
            title: "公司名",
            id: 4,
            paramName: "companyName",
            placeholder: "请输入公司名称"
          },
          {
            title: "姓名",
            id: 5,
            paramName: "surname",
            placeholder: "请输入姓名"

          },
          {
            title: "QQ号",
            id: 3,
            paramName: "qq",
            placeholder: "请输入QQ号"
          }
        ],
        inputType: "select"
      },
      {
        iconPath: "../../Common/images/select-icon.png",
        title: '请输入',
        inputType: "input",
        placeholder: "请输入对应事物"
      }
    ],
    GenerateQRcode: [
      {
        iconPath: "../../Common/images/orCode.png",
        title: '生成二维码',
        inputType: "textarea",
        placeholder: "输入二维码内容"
      }
    ],
    Numberlocationquery: [
      {
        iconPath: "../../Common/images/blue-phone.png",
        title: '请输入手机号',
        inputType: "input",
        placeholder: "请输入11位手机号"
      }
    ],
    DreamInterpretation: [
      {
        iconPath: "../../Common/images/Dream.png",
        title: '请输入梦中的事物',
        inputType: "input",
        placeholder: "例如：蛇"
      }
    ],
    iptvalue: '',//input里面的内容
    selectVal: '',
    btnColor: {
      orc: {
        color: '#02bfff',
        text: '复制文本',
      },
      Fortunetelling: {
        color: "#E14350",
        text: '查看结果',
        iconPath: "../../Common/images/select-icon.png",
      },
      GenerateQRcode: {
        color: "#15cab9",
        text: '生成二维码',
        iconPath: "../../Common/images/orCode.png",
      },
      RecognizeQRcode: {
        color: "#09B775",
        text: '复制文本'
      },
      Numberlocationquery: {
        color: "#3784F9",
        text: '查询',
        iconPath: "../../Common/images/site.png",
      },
      DreamInterpretation: {
        color: "#FF7957",
        text: '解梦',
        iconPath: "../../Common/images/Dream.png",
      }
    },
    adCodeImgUrl: "",
    showProblem: true,//是否展示问题框
    showBtn: true
  },
  onInit(e) {
    const { currUri, reqType, result } = e;
    this.result = result;
    console.log(reqType, '查看进来参数');
    this.reqType = reqType
    if (reqType === 'orc') {
      this.showLoding = true;
      this.currUri = currUri;
      this.getBase64()
      this.changeTabName('OCR识别中')
    } else if (reqType === 'Fortunetelling') {
      this.defaultSelectList = this.Fortunetelling;
      let val = this.Fortunetelling[0].selectArr[0]
      this.changeSelctVal(val, 0)
      this.changeTabName('测吉凶')
    } else if (reqType === 'GenerateQRcode') {
      this.defaultSelectList = this.GenerateQRcode;
      this.changeTabName('生成二维码')
    } else if (reqType === 'RecognizeQRcode') {
      this.changeTabName('识别结果')
    } else if (reqType === 'Numberlocationquery') {
      this.defaultSelectList = this.Numberlocationquery;
      this.changeTabName('归属地查询')
    } else if (reqType === 'DreamInterpretation') {
      this.defaultSelectList = this.DreamInterpretation;
      this.changeTabName('周公解梦')
    }
  },
  changeTabName: function (name) {
    this.$page.setTitleBar({ text: name })
  },
  getBase64(type) {
    const that = this
    file.readArrayBuffer({
      uri: this.currUri, // this.currUri 是文件路径
      success: (data) => {
        console.log('buffer.length: ' + data.buffer.length)
        // $utils.showToast(data.buffer.length + '这是成功的')
        const base64 = base64Arraybuffer.encode(data.buffer)

        if (that.reqType === 'orc') {
          $apis.tools.postUploadOcr({
            img_base64: base64
          }).then((res) => {
          }).catch((err) => {
            console.log(err, '怎么报错了');
            let data = JSON.parse(err)
            console.log(data.showapi_res_code, '怎么报错了');
            if (data.showapi_res_code === 0 && data.showapi_res_body.ret_code === 0) {
              let result = data.showapi_res_body.str
              that.result = result
            } else {
              $utils.showToast('超时，请重新拍照识别')
              setTimeout(() => {
                $router.back()
              }, 3000)
            }
            that.showLoding = false;
            that.changeTabName('识别结果')
          })
        } else if (that.reqType === 'RecognizeQRcode') {
          $apis.tools.qrCodeRecognition({
            imgData: base64
          }).then((res) => {
          }).catch((err) => {
            console.log(err, '怎么报错了');
            let data = JSON.parse(err)
            console.log(data.showapi_res_code, '怎么报错了');
            if (data.showapi_res_code === 0 && data.showapi_res_body.ret_code === 0) {
              let result = data.showapi_res_body.retText;
              that.result = result
            } else {
              $utils.showToast('请稍后再试')
            }
            that.showLoding = false
          })
        }
      },
      fail: function (data, code) {
        console.log(`handling fail, code = ${code}`)
        let str = code + '这是报错的'
        $utils.showToast(str)
      }
    })
  },
  submit: $utils.throttle(function (params) {
    console.log(this.reqType);
    if (this.result) {
      clipboard.set({
        text: this.result,
        success: function (data) {
          $utils.showToast('复制成功')
        },
        fail: function (data, code) {
          console.log(`handling fail, code = ${code}`)
          if (code === 201) {
            $utils.showToast('请授权再复制')
          }
          $utils.showToast('请稍后重试')
        }
      })
      return
    }
    if (this.reqType === 'Fortunetelling' && !this.result) {
      this.postFortuneTelling()
    }
    if (this.reqType === 'GenerateQRcode' && !this.result) {
      if (this.showProblem) {
        this.createQrcoed()
        return
      }

    }
    if (this.reqType === 'Numberlocationquery' && !this.result) {
      this.numberLocationQuery()
    }
    if (this.reqType === 'DreamInterpretation' && !this.result) {
      this.untieDream()
    }
  }),
  changeSelctVal: function (val, index) {
    this.selectVal = val;
    if (val.id === 5) {
      $utils.showToast('输入姓和名请用逗号隔开')
    }
    this.Fortunetelling[1].placeholder = this.Fortunetelling[0].selectArr[index].placeholder
  },
  postFortuneTelling: function () {
    let txt = this.iptvalue
    let selectVal = this.selectVal
    const that = this;
    let paymer = {
    }
    if (!this.iptvalue || !this.selectVal.id) {
      $utils.showToast('请选择并输入关键字')
      return
    }


    if (selectVal.id != 5) {
      if (!this.validateInput(this.selectVal.title, this.iptvalue)) {
        return
      }
      paymer[selectVal.paramName] = txt
    } else {
      paymer = this.getNamesAndCheckChinese(this.iptvalue)
      console.log(paymer, 'paymer');
      if (!paymer) {
        return
      }
    }

    $apis.tools.postFortuneTelling({ ...paymer }, selectVal.id).catch((err) => {
      let data = JSON.parse(err)
      if (data.showapi_res_code === 0) {
        if (that.selectVal.id != 5) {
          let result = data.showapi_res_body.expList.join('\n')
          console.log(result, '查看这个答案');
          // that.result = result
          $router.push({
            uri: 'setting/displayResults',
            params: {
              result: result,
              reqType: that.reqType
            }
          })

          that.iptvalue = ''
          that.$set('iptvalue', '')
        } else {
          that.iptvalue = ''
          that.$set('iptvalue', '')
          // console.log(data.showapi_res_body);
          let result = that.convertToArrayString(data.showapi_res_body.contentList)
          // that.result = result
          $router.push({
            uri: 'setting/displayResults',
            params: {
              result: result,
              reqType: that.reqType
            }
          })
        }
      } else {
        $utils.showToast('请稍后再试')
      }
    })

  },
  getNamesAndCheckChinese: function (str) {
    // 定义检查字符串是否全为中文的函数  
    function isChinese(s) {
      for (let i = 0; i < s.length; i++) {
        if (!/[\u4e00-\u9fa5]/.test(s.charAt(i))) {
          // 如果字符串中包含非中文字符，则返回false  
          return false;
        }
      }
      // 如果所有字符都是中文，则返回true  
      return true;
    }

    // 尝试按逗号分隔字符串  
    const parts = str.split(',');
    if (parts.length !== 2) {
      $utils.showToast('请用逗号隔开姓名')
      // 如果分隔后不是两部分，返回错误信息  
      return false
    }

    const [surname, name] = parts;

    // 检查surname和name是否都是中文  
    if (isChinese(surname) && isChinese(name)) {
      // 如果都是中文，则返回这两个参数  
      return { surname, name };
    } else {
      $utils.showToast('请输入中文')
      // 如果不都是中文，返回错误信息  
      return false
    }
  },
  convertToArrayString(contentList) {
    let result = '';
    contentList.forEach(item => {
      result += `${item.title}\n`;
      item.expList.forEach(exp => {
        result += `${exp}\n`;
      });
      // 如果需要在每个对象的输出后添加额外的换行，可以取消注释下一行  
      // result += '\n';  
    });
    return result;
  },
  changeTxt: function (e) {
    this.iptvalue = e.value;
  },
  createQrcoed: function () {
    const that = this;
    if (!this.iptvalue.length) {
      $utils.showToast('请填写字符')
      return
    }
    const parmer = {
      content: this.iptvalue,
      size: '16'
    }
    console.log(parmer, '查看参数');
    $apis.tools.createQrcoed({ ...parmer }).catch((err) => {
      let data = JSON.parse(err)
      if (data.showapi_res_code === 0) {
        that.iptvalue = ''
        that.$set('iptvalue', '')
        // that.adCodeImgUrl = data.showapi_res_body.imgUrl
        // that.btnColor.GenerateQRcode.text = '保存'
        // that.showProblem = false;
        let result = data.showapi_res_body.imgUrl;
        console.log(result, 'result');
        console.log(that.reqType, 'that.reqType');
        $router.push({
          uri: 'setting/displayResults',
          params: {
            adCodeImgUrl: result,
            reqType: that.reqType
          }
        })
      } else {
        $utils.showToast('请稍后再试')
      }
    })
  },

  /**
   * 号码查询
   */
  numberLocationQuery: function () {
    const chineseCharPattern = /^1(3|4|5|6|7|8|9)\d{9}$/;
    let phoneNum = chineseCharPattern.test(this.iptvalue);
    if (!phoneNum) {
      $utils.showToast('请输入11位数字')
      return
    }
    const that = this;
    $apis.tools.numberLocationQuery({ num: this.iptvalue }).catch((err) => {
      let data = JSON.parse(err)
      if (data.showapi_res_code === 0 && data.showapi_res_body.ret_code === 0) {
        that.iptvalue = ''
        that.$set('iptvalue', '')
        // that.result = data.showapi_res_body.prov + data.showapi_res_body.city
        // that.showBtn = false
        let result = + '' + data.showapi_res_body.city
        $router.push({
          uri: 'setting/displayResults',
          params: {
            result: `${data.showapi_res_body.prov}    ${data.showapi_res_body.city}`,
            reqType: that.reqType
          }
        })
      } else {
        $utils.showToast('请稍后再试')
      }
    })
  },
  validateInput: function (type, input) {
    let message = '';
    let regex;
    switch (type) {
      case '手机号':
        // 手机号正则表达式（这里以中国大陆手机号为例，11位数字，以13, 14, 15, 17, 18开头）  
        regex = /^1(3|4|5|6|7|8|9)\d{9}$/;
        message = '手机号格式不正确';
        break;
      case '车牌号':
        // 车牌号正则表达式（这里以常见的七位车牌为例，第一位为省份简称，第二位为字母，后五位为字母和数字组合）  
        regex = /^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领A-Z]{1}[A-Z]{1}[A-Z0-9]{5}$/;
        message = '车牌号格式不正确';
        break;
      case '公司名':
        // 公司名正则表达式（这里简单处理，假设公司名至少包含两个中文字符）  
        regex = /^[\u4e00-\u9fa5]{2,}$/;
        message = '公司名格式不正确（至少包含两个中文字符）';
        break;
      case 'QQ号':
        // QQ号正则表达式（5-11位数字）  
        regex = /^\d{5,11}$/;
        message = 'QQ号格式不正确';
        break;
      default:
        return '未知类型';
    }

    if (!regex.test(input)) {
      $utils.showToast(message)
      return false;
    }

    return true;
  },
  /**'
   * 解梦
   * ' */
  untieDream: function () {
    const that = this;
    if (!this.iptvalue) {
      $utils.showToast('请填写关键词')
      return
    }
    function isChinese(s) {
      for (let i = 0; i < s.length; i++) {
        if (!/[\u4e00-\u9fa5]/.test(s.charAt(i))) {
          // 如果字符串中包含非中文字符，则返回false  
          return false;
        }
      }
      // 如果所有字符都是中文，则返回true  
      return true;
    }
    let valIsChinese = isChinese(this.iptvalue);
    if (!valIsChinese) {
      $utils.showToast('包含非中文字符请重新输入')
      return
    }

    $apis.tools.untieDream({
      keyWords: this.iptvalue
    }).catch((err) => {
      let data = JSON.parse(err)
      console.log(data.showapi_res_code, 'data.showapi_res_code');
      console.log(data.showapi_res_body.ret_code, 'data.showapi_res_code');
      if (data.showapi_res_code === 0 && data.showapi_res_body.ret_code === 0) {
        that.iptvalue = ''
        that.$set('iptvalue', '')
        // that.result = data.showapi_res_body.prov + data.showapi_res_body.city
        // that.showBtn = false
        console.log('进来了判断了');
        let result = that.convertToString(data.showapi_res_body.contentlist)
        console.log(result, 'result----------');
        if (!result) {
          $utils.showToast('暂无解梦结果')
          return
        }
        $router.push({
          uri: 'setting/displayResults',
          params: {
            result: result,
            reqType: that.reqType
          }
        })
      } else {
        $utils.showToast('请稍后再试')
      }
    })
  },
  convertToString: function (contentlist) {
    if (!contentlist.length) {
      return false
    }
    let result = '';
    contentlist.forEach(item => {
      result += `${item.name}\n`;
      item.detailList.forEach(detail => {
        result += `${detail}\n`;
      });
      // 如果需要在每个条目的末尾添加额外的换行符，可以取消注释下一行  
      result += '\n';
    });

    return result;
  }

}
</script>

<style lang="less">
@import './index.less';
</style>